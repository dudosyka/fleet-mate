package com.fleetmate.crypt

import com.fleetmate.crypt.conf.ServerConf
import com.fleetmate.crypt.modules.access.AccessController
import com.fleetmate.crypt.modules.access.AccessService
import com.fleetmate.crypt.modules.auth.controller.AuthController
import com.fleetmate.crypt.modules.auth.data.models.UserLoginModel
import com.fleetmate.crypt.modules.auth.service.AuthService
import com.fleetmate.crypt.modules.rbac.service.RbacService
import com.fleetmate.crypt.modules.user.service.UserService
import com.fleetmate.lib.data.model.role.RbacModel
import com.fleetmate.lib.data.model.role.RoleModel
import com.fleetmate.lib.model.user.UserModel
import com.fleetmate.lib.plugins.*
import com.fleetmate.lib.utils.database.DatabaseConnector
import com.fleetmate.lib.utils.kodein.bindSingleton
import com.fleetmate.lib.utils.kodein.kodeinApplication
import com.fleetmate.lib.utils.security.ecdh.ECDH
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.selectAll

fun main() {
    embeddedServer(Netty, port = ServerConf.port, host = ServerConf.host, module = Application::module)
        .start(wait = true)
}

fun Application.module() {
    configureSecurity()
    configureCORS()
    configureMonitoring()
    install(aesCryptPluginReceive)
    configureSerialization()
    install(aesCryptPluginRespond)
    configureExceptionFilter()

    kodeinApplication("/bridge") {
        //Services
        bindSingleton { AccessService(it) }
        bindSingleton { AuthService(it) }
        bindSingleton { UserService(it) }
        bindSingleton { RbacService(it) }


        //Controllers
        bindSingleton { AccessController(it) }
        bindSingleton { AuthController(it) }

    }

    DatabaseConnector(
        ECDH,
        RoleModel,
        UserModel,
        UserLoginModel,
        RbacModel

    ) {
//        RbacModel.insert {
//            it[id] = 2
//            it[user] = 1
//            it[role] = 2
//        }
//        DivisionModel.insert {
//            it[name] = "division_name"
//        }
//        PostModel.insert {
//            it[name] = "post_model"
//        }
//
//            UserModel.insert {
//                it[id] = 1
//                it[login] = "admin"
//                it[hash] = CryptoUtil.hash("admin")
//                it[fullName] = "Admin User"
//                it[email] = "email@email.email"
//                it[phoneNumber] = "+79775468521"
//                it[post] = 1
//                it[division] = 1
//            }

            if (RoleModel.selectAll().empty()){
                val roleId = 1

                RoleModel.insert {
                    it[id] = roleId
                    it[name] = "admin"
                    it[description] = "Autogenerated role with full access to the system"
                }
                RoleModel.insert {
                    it[id] = roleId + 1
                    it[name] = "driver"
                    it[description] = "Autogenerated role with full access to the system"
                }
                RoleModel.insert {
                    it[id] = roleId + 2
                    it[name] = "mechanic"
                    it[description] = "Autogenerated role with full access to the system"
                }
            }

    }
}